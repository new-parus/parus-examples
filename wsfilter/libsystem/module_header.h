/*
 *  This file is a part of the PARUS project.
 *  Copyright (C) 2006  Alexey N. Salnikov
 *  
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 * Alexey N. Salnikov (salnikov@cmc.msu.ru)
 *
 */

/*
**********************************************************************************
*                                                                                *
* The header of library for reading headers of "System" modules in NetCDF format *
*             Written by Alexey Salnikov in 2004                                 *
*                                                                                *
**********************************************************************************
* It is a file with functions allows modules of "System" easy to read header     *
* files.                                                                         *
*                                                                                *
* The header file is a file that kernel of "System" send to modules from server  *
* in NetCDF format.                                                              *
*                                                                                *
* There is a set of pseudo NetCDF variables. This variables correspond to files  *
* what using by module and will be generated by module.                          *
*                                                                                *
* Header also capable consists some global attributes if module                  *
* are needing in it.                                                             *
*                                                                                *
* Example of header file in CDL format:                                          *
*                                                                                *
* //begin example                                                                *
* netcdf header {                                                                *
* dimensions:                                                                    *
* 	one = 1 ;                                                                *
* variables:                                                                     *
* 	int file1(one) ;                                                         *
* 		file1:type = "in" ;                                              *
* 		file1:name = "res.nc" ;                                          *
* 	int file2(one) ;                                                         *
* 		file2:type = "out" ;                                             *
* 		file2:name = "out1.nc" ;                                         *
* 	int file3(one) ;                                                         *
* 		file3:type = "out" ;                                             *
* 		file3:name = "out2.nc" ;                                         *
*                                                                                *
* 	:omission_length = 3 ;                                                   *
*                                                                                *
* data:                                                                          *
* 	file1 = _ ;                                                              *
* 	file2 = _ ;                                                              *
* 	file3 = _ ;                                                              *
* }                                                                              *
* //end example                                                                  *
*                                                                                *
* There are some types of files:                                                 *
*       in              - files are reading by module, module must not change    *
*                         this files                                             *
*       out             - new files are generated by module after its work       *
*       inout           - files already exist but module will chaange them       *
*       doneflag        - deprecated type of file. Module must have only one     *
*                         file of this type. It is a way for module to inform    *
*                         kernel that module already finished.                   *
*                                                                                *
**********************************************************************************
*/

#ifndef __MODULE_HEADER_H__
#define __MODULE_HEADER_H__

#include <stdlib.h>


/*
 *
 * Types of files in module NetCDF header
 *
 */
#define HEADER_INPUT_TYPE		0
#define HEADER_OUTPUT_TYPE		1
#define HEADER_INOUT_TYPE		2
#define HEADER_DONEFLAG_TYPE		3 /* Deprecated */
#define HEADER_ERROR_TYPE		4 /* Error, unknown file type */


/*
 *
 * Types of attributes in module NetCDF header
 *
 */
#define HEADER_ATT_UCHAR		0 /* unsigned char */
#define HEADER_ATT_SCHAR		1 /* signed char */
#define HEADER_ATT_SHORT		2
#define HEADER_ATT_INT			3
#define HEADER_ATT_FLOAT		4
#define HEADER_ATT_DOUBLE		5
#define HEADER_ATT_ERROR		6 /* Error, unknown attribute type */

typedef struct
{
	
	char type;
	char *name;
	
} Module_parameter_file;


typedef struct
{
	char type;
	char *name;
	void *value;
	size_t size;
	
} Module_attribute;


typedef struct
{
	int num_files;
	Module_parameter_file *files;
	int num_attributes;
	Module_attribute *attributes;
} Module_parameters;


/*
 *
 *
 * The prototypes are not actual for implementation
 *
 *
 */
#ifndef __MODULE_HEADER_C__

#ifdef __cplusplus
 extern "C" {
#endif
/**
 * This function read header of the module.
 * The header is send by kernel of "System" from server in NetCDF format.
 * As result this function fills struct Module_parametrs, that capable 
 * be using by module against parsing NetCDF file. The generetad structure need
 * be dispoused after using by funcltion free_parameters_struct.
 *
 * @param file_name sets file name of header for module.
 * @param parms is a structure with parameters.
 *
 * @return 0 on sucssess and -1 if error.
 * 
 */
extern int read_module_header(const char *file_name,Module_parameters *parms);
/**
 * Free memory allocated for parameters of module.
 * Attention! The  memory under pointer to a structure that is parameter of funcltion is not 
 * deleting. It deletes internal variables in structure only but not structure.
 *
 */
extern void free_parameters_struct(Module_parameters *parms);
/**
 * Print parameters to stdout.
 * 
 */
extern int print_module_parameters(Module_parameters *parms);
/**
 * Copy attribute value to pointer by attribute name.
 * Memory for value of attribute must be allocated 
 * early.
 * 
 */
extern int get_module_attribute_value(Module_parameters *parms, const char *name, void *val);
/**
 * Read attribute size in elements from Module_parametrs structure by attribute name.
 *
 */
extern int get_module_attribute_size (Module_parameters *parms, const char *name, size_t *size);
/**
 * Read attribute type from Module_parametrs structure by attribute name.
 * 
 */
extern int get_module_attribute_type (Module_parameters *parms, const char *name, char *type);


#ifdef __cplusplus
 }
#endif

#endif /* __MODULE_HEADER_C__ */

#endif /* __MODULE_HEADER_H__ */

